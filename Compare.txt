namespace MicrosoftCorp.CompareFiles
{
    using Microsoft.VisualStudio;
    using Microsoft.VisualStudio.Shell;
    using Microsoft.VisualStudio.Shell.Interop;
    using MicrosoftCorp.CompareFiles.Properties;
    using System;
    using System.ComponentModel.Design;
    using System.Runtime.InteropServices;
    using System.Windows.Forms;

    [Guid("69193647-74c6-4e03-b292-8092b0ea4d0a"), ProvideMenuResource("Menus.ctmenu", 1), PackageRegistration(UseManagedResourcesOnly=true), InstalledProductRegistration("#110", "#112", "1.0", IconResourceID=400), ProvideAutoLoad("{F1536EF8-92EC-443C-9ED7-FDADF150DA82}")]
    public sealed class CompareFiles : Package
    {
        private IVsDifferenceService diffService;
        private IVsMultiItemSelect mis;
        private IVsMonitorSelection monitorSelection;
        private IVsSccManager2 sccManagerService;

        private void DocCompareCallBack(object sender, EventArgs e)
        {
            object obj2;
            object obj3;
            string leftFileMoniker = null;
            string rightFileMoniker = null;
            this.monitorSelection.GetCurrentElementValue(2, out obj2);
            (obj2 as IVsWindowFrame).GetProperty(-4003, out obj3);
            rightFileMoniker = obj3.ToString();
            FileChoose choose = new FileChoose {
                txtFile2path = { Text = (rightFileMoniker != null) ? rightFileMoniker : "" }
            };
            if (choose.ShowDialog() == true)
            {
                leftFileMoniker = choose.txtFile1path.Text;
                rightFileMoniker = choose.txtFile2path.Text;
                if (leftFileMoniker == null)
                {
                }
                this.diffService.OpenComparisonWindow(leftFileMoniker, rightFileMoniker);
            }
        }

        protected override void Initialize()
        {
            base.Initialize();
            OleMenuCommandService service = base.GetService(typeof(IMenuCommandService)) as OleMenuCommandService;
            if (service == null)
            {
                throw new NullReferenceException("OleMenuCommandService could not be acquired");
            }
            CommandID id = new CommandID(GuidList.guidCompareFilesCmdSet, 0x100);
            OleMenuCommand command = new OleMenuCommand(new EventHandler(this.MenuItemCallback), id);
            command.BeforeQueryStatus += new EventHandler(this.queryStatusMenuCommand_BeforeQueryStatus);
            service.AddCommand(command);
            CommandID did2 = new CommandID(GuidList.guidCompareFilesCmdSet, 0x101);
            OleMenuCommand command2 = new OleMenuCommand(new EventHandler(this.DocCompareCallBack), did2);
            service.AddCommand(command2);
            this.monitorSelection = (IVsMonitorSelection) Package.GetGlobalService(typeof(SVsShellMonitorSelection));
            this.diffService = Package.GetGlobalService(typeof(SVsDifferenceService)) as IVsDifferenceService;
            this.sccManagerService = (IVsSccManager2) Package.GetGlobalService(typeof(SVsSccManager));
        }

        private void MenuItemCallback(object sender, EventArgs e)
        {
            string pbstrName = null;
            string text = null;
            IntPtr ptr;
            IntPtr ptr2;
            uint num;
            if (ErrorHandler.Succeeded(this.monitorSelection.GetCurrentSelection(out ptr, out num, out this.mis, out ptr2)))
            {
                if (this.mis != null)
                {
                    uint num2;
                    int num3;
                    if (ErrorHandler.Succeeded(this.mis.GetSelectionInfo(out num2, out num3)))
                    {
                        if (num2 != 2)
                        {
                            MessageBox.Show(MicrosoftCorp.CompareFiles.Properties.Resources.ErrorString, MicrosoftCorp.CompareFiles.Properties.Resources.ErrorTitle, MessageBoxButtons.OK);
                        }
                        else
                        {
                            VSITEMSELECTION[] rgItemSel = new VSITEMSELECTION[num2];
                            if ((ErrorHandler.Succeeded(this.mis.GetSelectedItems(0, num2, rgItemSel)) && ErrorHandler.Succeeded(rgItemSel[0].pHier.GetCanonicalName(rgItemSel[0].itemid, out pbstrName))) && ErrorHandler.Succeeded(rgItemSel[1].pHier.GetCanonicalName(rgItemSel[1].itemid, out text)))
                            {
                                if (pbstrName == null)
                                {
                                }
                                this.diffService.OpenComparisonWindow(pbstrName, text);
                            }
                        }
                    }
                }
                else
                {
                    (Marshal.GetTypedObjectForIUnknown(ptr, typeof(IVsHierarchy)) as IVsHierarchy).GetCanonicalName(num, out text);
                    FileChoose choose = new FileChoose {
                        txtFile2path = { Text = (text != null) ? text : "" }
                    };
                    if (choose.ShowDialog() == true)
                    {
                        pbstrName = choose.txtFile1path.Text;
                        text = choose.txtFile2path.Text;
                        if (pbstrName == null)
                        {
                        }
                        this.diffService.OpenComparisonWindow(pbstrName, text);
                    }
                }
            }
        }

        private void queryStatusMenuCommand_BeforeQueryStatus(object sender, EventArgs e)
        {
            IntPtr ptr;
            IntPtr ptr2;
            uint num;
            OleMenuCommand command = sender as OleMenuCommand;
            string pbstrName = null;
            if (ErrorHandler.Succeeded(this.monitorSelection.GetCurrentSelection(out ptr, out num, out this.mis, out ptr2)))
            {
                (Marshal.GetTypedObjectForIUnknown(ptr, typeof(IVsHierarchy)) as IVsHierarchy).GetCanonicalName(num, out pbstrName);
                if (pbstrName != null)
                {
                    if ((this.sccManagerService != null) && (this.sccManagerService.GetSccGlyph(1, new string[] { pbstrName }, new VsStateIcon[1], new uint[1]) == 0))
                    {
                        command.Enabled = false;
                    }
                    else
                    {
                        command.Enabled = true;
                    }
                }
                else
                {
                    command.Enabled = true;
                }
            }
        }
    }
}
